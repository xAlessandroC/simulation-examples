//
// Generated file, do not edit! Created by nedtool 6.0 from msg/RegistrationPacket.msg.
//

#ifndef __REGISTRATIONPACKET_M_H
#define __REGISTRATIONPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class RegistrationPacket;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

/**
 * Class generated from <tt>msg/RegistrationPacket.msg:20</tt> by nedtool.
 * <pre>
 * class RegistrationPacket extends inet::FieldsChunk
 * {
 *     double ram;
 *     double cpu;
 *     double disk;
 * 
 *     inet::L3Address address;
 * }
 * </pre>
 */
class RegistrationPacket : public ::inet::FieldsChunk
{
  protected:
    double ram = 0;
    double cpu = 0;
    double disk = 0;
    inet::L3Address address;

  private:
    void copy(const RegistrationPacket& other);

  protected:
    bool operator==(const RegistrationPacket&) = delete;

  public:
    RegistrationPacket();
    RegistrationPacket(const RegistrationPacket& other);
    virtual ~RegistrationPacket();
    RegistrationPacket& operator=(const RegistrationPacket& other);
    virtual RegistrationPacket *dup() const override {return new RegistrationPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getRam() const;
    virtual void setRam(double ram);
    virtual double getCpu() const;
    virtual void setCpu(double cpu);
    virtual double getDisk() const;
    virtual void setDisk(double disk);
    virtual const inet::L3Address& getAddress() const;
    virtual inet::L3Address& getAddressForUpdate() { handleChange();return const_cast<inet::L3Address&>(const_cast<RegistrationPacket*>(this)->getAddress());}
    virtual void setAddress(const inet::L3Address& address);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RegistrationPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RegistrationPacket& obj) {obj.parsimUnpack(b);}

#endif // ifndef __REGISTRATIONPACKET_M_H

